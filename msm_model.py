# -*- coding: utf-8 -*-
"""MSM Model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Eqacqd03E1N4EhC3kRLFDQ1YijT7pu1O
"""

import pandas as pd
from datetime import datetime, timedelta

# Sample data generation (replace with your actual data)
data = {
    'member_id': [1, 2, 3, 4, 5, 6, 7, 8],
    'outreach_month': ['2023-02', '2023-03', None, None, None, None, None, None],
    'fill_dates': [
        ['2023-02-15', '2023-05-20'],  # Treated (Feb)
        ['2023-04-10'],                # Treated (Mar)
        [],                             # Excluded (shouldn't exist in real data)
        ['2023-03-01'],                # Control candidate (filled before Mar outreach)
        ['2023-04-01'],                # Control candidate
        ['2023-05-01'],                # Control candidate
        ['2023-06-01'],                # Control candidate
        ['2023-07-01']                 # Control candidate
    ],
    'prior_year_fills': [2, 1, 2, 1, 3, 2, 1, 0]
}

df = pd.DataFrame(data)

# Preprocess dates
df['outreach_date'] = pd.to_datetime(df['outreach_month']).dt.to_period('M').dt.start_time
df['fill_dates'] = df['fill_dates'].apply(
    lambda x: [datetime.strptime(d, '%Y-%m-%d') for d in x] if x else []
)

# Calculate earliest fill date and filter valid controls
df['earliest_fill'] = df['fill_dates'].apply(lambda x: min(x) if x else pd.NaT)
valid_controls_mask = (df['outreach_date'].isna()) & (df['earliest_fill'].notna())
control_df = df[valid_controls_mask].copy()

# Split treated members
treated_df = df[df['outreach_date'].notna()].copy()

matches = []

# Matching logic
for idx, treated in treated_df.iterrows():
    outreach_date = treated['outreach_date']
    prior_fills = treated['prior_year_fills']

    # Find eligible controls
    eligible_controls = control_df[
        (control_df['prior_year_fills'] == prior_fills) &
        (control_df['earliest_fill'] > outreach_date)  # Fill after outreach date
    ]

    if not eligible_controls.empty:
        # Select control with nearest fill date
        control = eligible_controls.iloc[
            (eligible_controls['earliest_fill'] - outreach_date).abs().argsort()[:1]
        ].iloc[0]

        # Calculate outcomes
        treated_outcome = 1 if any(
            (fill >= outreach_date) &
            (fill <= outreach_date + pd.DateOffset(years=1))
            for fill in treated['fill_dates']
        ) else 0

        # Control outcome is always 1 by definition
        matches.append({
            'treated_id': treated['member_id'],
            'control_id': control['member_id'],
            'outreach_month': outreach_date.strftime('%Y-%m'),
            'prior_year_fills': prior_fills,
            'treated_outcome': treated_outcome,
            'control_outcome': 1  # Always 1 for valid controls
        })

# Convert matches to DataFrame
matches_df = pd.DataFrame(matches)
print("Matches:")
print(matches_df.to_string(index=False))

# Prepare data for rollmatch
prepared_data <- format_data(monthly_data,
                            treat = "treated",
                            outcome = "ldl_change",
                            covariates = c("age", "baseline_ldl", "comorbidities", "income_level"),
                            time = "month",
                            id = "patient_id")

# Perform rolling window matching
results <- rollmatch(prepared_data,
                    window = 3, # 3-month rolling window
                    caliper = 0.25,
                    matching_ratio = 2)

# Analyze results
summary(results)
plot(results)

set.seed(123)

N <- 20      # number of individuals
T <- 6       # number of periods (0..5)
n_rows <- N * T

simdat <- data.frame(
  id        = rep(1:N, each=T),      # subject IDs
  period    = rep(0:(T-1), times=N), # periods: 0..5 repeated across subjects

  # random 0/1 for each (id, period)
  treatment = rbinom(n_rows, size=1, prob=0.3),
  event     = rbinom(n_rows, size=1, prob=0.2),

  # a few continuous covariates
  x1 = rnorm(n_rows),
  x2 = rnorm(n_rows),
  x3 = rnorm(n_rows),
  x4 = rnorm(n_rows),
  x5 = rnorm(n_rows)
)

head(simdat)
# Example:
#   id period treatment event          x1          x2          x3          x4         x5
# 1  1      0         0     1 -0.56047565  0.07050839  1.71506499 -0.68685285 -1.2650612
# 2  1      1         0     0 -0.23017749  0.12928774  0.46091621 -0.44566197 -0.6868529
# 3  1      2         1     0  1.55870831  1.71506499 -1.26506123  1.22408180 -0.4456620
# etc.



dfDB <- rmDB(
  data      = simdat,
  id        = "id",
  period    = "period",
  treatment = "treatment",
  outcome   = "event",
  covs      = c("x1","x2","x3","x4","x5"),
  time      = c(0,1,2,3,4,5),  # full set of periods
  ps_method = "glm"            # logistic regression for PS
)